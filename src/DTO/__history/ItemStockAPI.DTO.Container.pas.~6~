unit ItemStockAPI.DTO.Container;

interface

uses
  ItemStockAPI.DTO.Interfaces, Data.DB;

type
  TContainerDTO = class(TInterfacedObject, IContainerDTO)
  private
    FID: Integer;
    FNumero: Integer;
    FDescricao: String;
    FData: TDataset;
  public
    class function New: IContainerDTO;
    constructor Create;
    destructor Destroy; override;
    function ID(aID: Integer): IContainerDTO; overload;
    function ID: Integer; overload;
    function Numero(aNumero: Integer): IContainerDTO; overload;
    function Numero: Integer; overload;
    function Descricao(aDescricao: String): IContainerDTO; overload;
    function Descricao: String; overload;
    function Data(aData: TDataset): IContainerDTO; overload;
    function Data: TDataset; overload;
  end;

implementation

{ TContainerDTO }

constructor TContainerDTO.Create;
begin
 FData := TDataSet.Create(nil);
end;

function TContainerDTO.Data: TDataset;
begin
Result := FData;
end;

function TContainerDTO.Data(aData: TDataset): IContainerDTO;
begin
Result := Self;
FData := aData;
end;

function TContainerDTO.Descricao(aDescricao: String): IContainerDTO;
begin
Result := Self;
FDescricao := aDescricao;
end;

function TContainerDTO.Descricao: String;
begin
Result := FDescricao;
end;

destructor TContainerDTO.Destroy;
begin

  inherited;
end;

function TContainerDTO.ID: Integer;
begin

end;

function TContainerDTO.ID(aID: Integer): IContainerDTO;
begin

end;

class function TContainerDTO.New: IContainerDTO;
begin
  Result := TContainerDTO.Create;
end;

function TContainerDTO.Numero(aNumero: Integer): IContainerDTO;
begin

end;

function TContainerDTO.Numero: Integer;
begin

end;

end.
