unit ItemStockAPI.Routes.Item;

interface

 type
  TItemRotas = class

  public
  class procedure Routes;
  end;

implementation

uses
  Horse, ItemStockAPI.DTO.Interfaces, ItemStockAPI.DTO.Item,
  ItemStockAPI.Controller.Item;

{ TItemRotas }

procedure OnRemover(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try
  aDTO.ID(aReq.Params.Field('id').AsInteger);

  TCItem.New(aDTO)
 except

 end;
end;

procedure OnAdicionar(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try

 except

 end;
end;

procedure OnEditar(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try

 except

 end;
end;

procedure OnObterDados(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try

 except

 end;
end;

procedure OnPesquisar(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try

 except

 end;
end;

procedure OnObterTodos(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try

 except

 end;
end;

procedure OnItemContainer(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try

 except

 end;
end;

procedure onQuantidade(aReq: THorseRequest; aRes: THorseResponse);
var aDTO : IItemDTO;
begin
 aDTO := TITemDTO.Create;
 try

 except

 end;
end;


class procedure TItemRotas.Routes;
begin
 Thorse.Group.Prefix('/item')
 .Post('',OnAdicionar)
 .Put('',OnEditar)
 .Delete('/:id',OnRemover)
 .Get('/:uuid',OnObterDados)
 .Get('/buscar/:key',OnPesquisar)
 .Get('',OnObterTodos)
 .Get('/container/:uuid',OnItemContainer)
 .Get('/quantidade',onQuantidade);
end;

end.
